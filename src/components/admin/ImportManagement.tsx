
import React, { useState } from 'react';
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Button } from "@/components/ui/button"
import { useToast } from "@/hooks/use-toast"
import { useData } from "@/context/DataContext";
import Papa from 'papaparse';
import { Product } from '@/types';

const ImportManagement = () => {
  const [csvFile, setCsvFile] = useState<File | null>(null);
  const { toast } = useToast();
  const { addProduct, products } = useData();
  const [isImporting, setIsImporting] = useState(false);

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    if (event.target.files && event.target.files.length > 0) {
      setCsvFile(event.target.files[0]);
    }
  };

  const handleProductImport = async (productData: Record<string, unknown>): Promise<void> => {
    try {
      if (!productData) {
        toast({
          title: "Error",
          description: "Invalid product data.",
          variant: "destructive",
        });
        return;
      }

      // Create a properly typed product object
      const product: Product = {
        id: "", // Will be generated by the database
        name: String(productData.name || ""),
        sku: String(productData.sku || ""),
        description: String(productData.description || ""),
        stock_level: parseInt(String(productData.stock_level || "0"), 10) || 0,
        weight: parseFloat(String(productData.weight || "0")) || 0,
        requiresWeightInput: productData.requiresWeightInput === 'true',
        unit: String(productData.unit || ""),
        required: productData.required === 'true',
        created: new Date().toISOString(),
      };

      // Check if a product with the same SKU already exists
      const existingProduct = products.find((p) => p.sku === product.sku);
      if (existingProduct) {
        toast({
          title: "Error",
          description: `Product with SKU ${product.sku} already exists.`,
          variant: "destructive",
        });
        return;
      }

      // Call addProduct to add the new product
      const newProduct = await addProduct(product);

      if (newProduct) {
        toast({
          title: "Success",
          description: `${product.name} added successfully.`,
        });
      } else {
        toast({
          title: "Error",
          description: `Failed to add ${product.name}.`,
          variant: "destructive",
        });
      }
    } catch (error: any) {
      console.error("Error adding product:", error);
      toast({
        title: "Error",
        description: `Failed to add product: ${error.message || "Unknown error"}`,
        variant: "destructive",
      });
    }
  };

  const handleImport = () => {
    if (!csvFile) {
      toast({
        title: "Error",
        description: "Please select a CSV file.",
        variant: "destructive",
      });
      return;
    }

    setIsImporting(true);

    Papa.parse(csvFile, {
      header: true,
      complete: async (results) => {
        const { data, errors } = results;

        if (errors.length > 0) {
          console.error("CSV Parsing Errors:", errors);
          toast({
            title: "CSV Parsing Error",
            description: "There was an error parsing the CSV file. Check console for details.",
            variant: "destructive",
          });
          setIsImporting(false);
          return;
        }

        try {
          // Process each row and convert to Product
          for (const row of data) {
            await handleProductImport(row as Record<string, unknown>);
          }
        } catch (error) {
          console.error("Error processing products:", error);
        } finally {
          setIsImporting(false);
        }
      },
      error: (error) => {
        console.error("CSV Parsing Error:", error);
        toast({
          title: "CSV Parsing Error",
          description: "Failed to parse CSV file. Check console for details.",
          variant: "destructive",
        });
        setIsImporting(false);
      },
    });
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>Import Products</CardTitle>
        <CardDescription>Import products from a CSV file.</CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="grid gap-2">
          <Label htmlFor="csv">CSV File</Label>
          <Input
            id="csv"
            type="file"
            accept=".csv"
            onChange={handleFileChange}
            disabled={isImporting}
          />
        </div>
        <Button onClick={handleImport} disabled={isImporting}>
          {isImporting ? "Importing..." : "Import"}
        </Button>
      </CardContent>
    </Card>
  );
};

export default ImportManagement;
